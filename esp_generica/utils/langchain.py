from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

prompt_template = ChatPromptTemplate.from_template(
"""Generar una especificaci√≥n t√©cnica **gen√©rica** **totalmente reutilizable** en formato **Markdown (.md)** a partir de **{parrafo1}** proporcionada al final.

## Titulo.

La especificaci√≥n t√©cnica gen√©rica debe tener el siguiente t√≠tulo: ## {titulo}

### Estructura obligatoria.

Mantener las siguientes secciones, en el mismo orden y formato:

- Descripci√≥n.
- Materiales, herramientas y equipo.
- Procedimiento.
- Medici√≥n y Forma de Pago.
- Par√°metros T√©cnicos Recomendados.
- Adicionales.

### Estilo y redacci√≥n

Profesional, t√©cnico y claro, como en especificaciones reales de obra.  
Imitar el estilo del √≠tem original en redacci√≥n y tono.
No incluir encabezados externos al contenido generado.
Usar **negrita** (doble asterisco `**`) para resaltar t√©rminos clave o t√©cnicos importantes unicamente en el **Procedimiento** y **Medicion y Forma de Pago**, tales como unidades de medici√≥n (ej. **metros lineales**) y acciones relevantes del procedimiento

### Reglas de generalizaci√≥n

1. Redactar el documento bas√°ndose exclusivamente en el contenido de **{parrafo1}**.
2. **No conservar valores t√©cnicos espec√≠ficos** (ej. dimensiones, marcas, modelos). Reemplazarlos por descripciones gen√©ricas o variables.
   - Ejemplo: Reemplazar "cinta 3M de 2 pulgadas" por "cinta antideslizante".
3. No inventar actividades o materiales que no est√©n mencionados en **{parrafo1}**.
4. **Todas las actividades descritas en {parrafo1} deben estar incluidas y ordenadas l√≥gicamente**.
5. Si se infieren tareas finales relevantes (limpieza, retiro de moldes, etc.), pueden ser incluidas si no contradicen la base.
6. Las actividades complementarias deben ir solo en la secci√≥n **Adicionales**.
7. El contenido debe ser aplicable a distintas actividades similares.

### Redacci√≥n de la secci√≥n "Descripci√≥n"

Redactar en forma general pero t√©cnica, describiendo **qu√© abarca la actividad**, **qu√© objetivo t√©cnico o funcional tiene**.  
Incorporar el **nombre de la especificaci√≥n t√©cnica** y el tipo de material, espesor, si est√°n presentes en el t√≠tulo (ej. "[Material_principal]" y "[espesor]").  
Mantener una redacci√≥n similar a **{parrafo1}**, pero reemplazando valores, variables en expresiones gen√©ricas.
No inventar nuevas aplicaciones, mantener el prop√≥sito general tal como se deduce de {parrafo1}.

### Reglas de la secci√≥n "Materiales, herramientas y equipo"

Listar con formato exacto:
- **Materiales**: [elementos separados por comas].  
- **Equipo**: [m√°quinas y dispositivos].  
- **Herramientas**: [herramientas manuales o menores].  
- **EPP**: [elementos de protecci√≥n personal].

### Reglas de la secci√≥n "Procedimiento"

Redactar en **m√∫ltiples p√°rrafos t√©cnicos secuenciales**, sin numerar pasos.
Usar la informaci√≥n de **{parrafo1}** para generar el procedimiento.
Aplicar **negrita** para resaltar:
- **Acciones clave**
- **T√©rminos t√©cnicos**
- **Herramientas y materiales**
- **Unidades de medida**
Evitar mencionar la palabra ‚Äúprocedimiento‚Äù dentro del contenido.

### Reglas de la secci√≥n "Materiales, herramientas y equipo"

Listar con formato exacto:
- **Materiales**: [elementos separados por comas].  
- **Equipo**: [m√°quinas y dispositivos].  
- **Herramientas**: [herramientas manuales o menores].  
- **EPP**: [elementos de protecci√≥n personal].

### Reglas espec√≠ficas para "Medici√≥n y Forma de Pago"

Redactar en **tres p√°rrafos**, correspondientes a:  
  **Medici√≥n**,  
  **Verificaci√≥n**,  
  **Pago**.
En el primer p√°rrafo (**Medici√≥n**), debe indicarse claramente: La forma de medir la actividad y la **unidad de medida** expresada en forma literal y con s√≠mbolo entre par√©ntesis (por ejemplo: **metros cuadrados (m¬≤)**, **metros lineales (ml)**, etc.).  
En el segundo p√°rrafo (**Verificaci√≥n**), si se menciona una empresa responsable, redactar como: **"por [Nombre de la empresa]"**, evitando expresiones como "la empresa [Nombre]".
En el tercer p√°rrafo (**Pago**), debe indicarse claramente la forma de pago y si la misma esta sujeta algun resultyado (ejem. resitencia del Hormig√≥n)
Aplicar **negrita** √∫nicamente a acciones relevantes o unidades de medida en esta secci√≥n (ej. **verificaci√≥n**, **metros cuadrados**, **alineaci√≥n**, etc.).

### Reglas de la secci√≥n "Par√°metros T√©cnicos Recomendados"

En la secci√≥n incluir una tabla con tres columnas:
- **Par√°metro T√©cnico**
- **Opciones v√°lidas**
- **Valor por defecto**  

### Reglas de la secci√≥n "Adicionales".

En la secci√≥n, listar actividades complementarias comunes a este tipo de √≠tem. No deben estar incluidas en la redacci√≥n principal.
- Formato: **Subt√≠tulo** seguido de **descripci√≥n t√©cnica breve**.
- No incluir inspecciones, mantenimiento ni tareas administrativas.
*Ejemplo:*  
**Preparaci√≥n de terreno**: Limpieza, nivelaci√≥n y compactaci√≥n del terreno previo a la instalaci√≥n del sistema.

---

## üö´ Restricciones
- No generar medidas, marcas ni modelos comerciales.
- No agregar objetivos t√©cnicos no mencionados en **{parrafo1}**.
- No incluir cl√°usulas contractuales.
- No modificar la estructura ni el orden del documento.
- El contenido debe ser reutilizable y adaptable a proyectos similares.

{adicionales}
---

### üìÑ A continuaci√≥n se {parrafo2}:

{especificaciones_tecnicas}
""")

parrafo1_singular = "la especificaci√≥n t√©cnica base"
parrafo1_plural = "las especificaciones t√©cnicas base"

parrafo2_singular = "adjunta la especificaci√≥n t√©cnica base"
parrafo2_plural = "adjuntan las especificaciones t√©cnicas base"

def generar_documento(archivos, adicionales, titulo):
    
    parrafo1 = parrafo1_plural if len(archivos) > 1 else parrafo1_singular
    parrafo2 = parrafo2_plural if len(archivos) > 1 else parrafo2_singular
    especificaciones_tecnicas = "---"
    adicionales_str = ""
    
    if len(adicionales) > 0:
        adicionales_str = "*Adicionales*\n" + adicionales
    
    if len(archivos) > 1:    
        for i, archivo in enumerate(archivos):
            encabezado = f"\n\nEspecificaci√≥n t√©cnica {i+1}:\n---\n"
            try:
                # Leer el contenido del archivo subido
                contenido = archivo.read().decode('utf-8')
                contenido = encabezado + contenido
                especificaciones_tecnicas += contenido
                # Resetear el puntero del archivo para futuras lecturas
                archivo.seek(0)
            except Exception as e:
                print(f"Error al leer el archivo: {e}")
    
    print("=======")
    print(especificaciones_tecnicas)
    print("=======")
    
    llm = ChatOpenAI(
        model="gpt-4o-mini",
        temperature=0.0,
    )
    
    chain = prompt_template | llm | StrOutputParser()
    
    response = chain.invoke({
        "titulo": titulo,
        "parrafo1": parrafo1,
        "parrafo2": parrafo2,
        "especificaciones_tecnicas": especificaciones_tecnicas,
        "adicionales": adicionales_str
    })
    
    return response